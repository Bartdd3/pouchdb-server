#!/usr/bin/env node

"use strict";

var express  = require('express'),
    corser   = require('corser'),
    favicon  = require('serve-favicon'),
    path     = require('path'),
    mkdirp   = require('mkdirp'),
    nomnom   = require('nomnom'),
    wordwrap = require('wordwrap'),
    killable = require('killable'),
    tailLog  = require('../lib/logging');

// parse command line arguments

function terminalWrap(text) {
  // 21 chars from the left of the terminal might change when new
  // options are added
  return wordwrap(21, 80)(text).trim();
}

function parseArgs() {
  /* jshint maxlen:false */

  var options = {
    port: {
      abbr: 'p',
      help: terminalWrap("Port on which to run the server. (Defaults to /_config/httpd/port which defaults to 5984)."),
      callback: function(port) {
        if (port !== parseInt(port).toString()) {
          return "port must be an integer";
        }
      }
    },
    dir: {
      abbr: 'd',
      help: terminalWrap("Where to store database files. (Defaults to /_config/couchdb/database_dir which defaults to the current directory).")
    },
    config: {
      abbr: 'c',
      help: terminalWrap("The location of the configuration file that backs /_config."),
      default: './config.json'
    },
    host: {
      abbr: 'o',
      help: terminalWrap("The address to bind the server to. (Defaults to /_config/httpd/bind_address which defaults to 127.0.0.1).")
    },
    inMemory: {
      abbr: 'm',
      full: 'in-memory',
      flag: 'true',
      help: terminalWrap("Use a pure in-memory database (will be deleted upon restart!)")
    },
    proxy: {
      abbr: 'r',
      help: terminalWrap("Proxy requests to the specified host. Include a trailing '/'. Defaults to not active ('null').")
    },
    noColor: {
      // this option is handled by the 'colors' node module. It's just
      // here so it shows up in --help
      full: 'no-color',
      help: terminalWrap("Disable coloring of logging output.")
    },
    levelBackend: {
      full: 'level-backend',
      help: terminalWrap("Advanced - Alternate LevelDOWN backend (e.g. memdown, riakdown, redisdown) Note that you'll need to manually npm install it first.")
    },
    levelPrefix: {
      full: 'level-prefix',
      help: terminalWrap("Advanced - Prefix to use for all database names, useful for URLs in alternate backends, e.g. riak://localhost:8087/ for riakdown.")
    }
  };

  var result = nomnom
    .options(options)
    .script('pouchdb-server')
    .help([
      "Examples:",
      "",
      "  pouchdb-server --level-backend riakdown --level-prefix riak://localhost:8087",
      "  Starts up a pouchdb-server that talks to Riak.",
      "",
      "  pouchdb-server --level-backend redis",
      "  Starts up a pouchdb-server that talks to Redis, on localhost:6379",
      "",
      "  pouchdb-server --level-backend sqldown --level-prefix /tmp/",
      "  Starts up a pouchdb-server that uses SQLite, with db files stored in /tmp/"
    ].join('\n'))
    .nocolors()
    .parse();

  return result;
}

var args = parseArgs();

// build app

var app = express();

var pouchDBApp = require('express-pouchdb')({
  configPath: args.config
});
var config = pouchDBApp.couchConfig;
var logger = pouchDBApp.couchLogger;

// favicon
app.use(favicon(__dirname + '/../favicon.ico'));

// logging
var stopTailingLogImpl, loggingReady;

function restartTailingLog() {
  stopTailingLog();
  loggingReady = tailLog(config.get('log', 'file')).then(function (stop) {
    stopTailingLogImpl = stop;
  });
}

function stopTailingLog() {
  if (stopTailingLogImpl) {
    stopTailingLogImpl();
    stopTailingLogImpl = undefined;
  }
}

config.on('log.file', restartTailingLog);
restartTailingLog();

// cors
var corsMiddleware;
function corsChanged() {
  if (config.get('httpd', 'enable_cors')) {
    var origins = config.get('cors', 'origins');
    if (origins === '*') {
      origins = undefined;
    }
    if (origins) {
      origins = origins.split(', ');
    }

    corsMiddleware = corser.create({
      methods: config.get('cors', 'methods').split(', '),
      supportsCredentials: config.get('cors', 'credentials'),
      requestHeaders: config.get('cors', 'headers').split(', '),
      origins: origins
    });
  } else {
    corsMiddleware = null;
  }
}

[
  ['httpd', 'enable_cors', true],
  ['cors', 'credentials', true],
  ['cors', 'methods', 'GET, HEAD, POST, PUT, DELETE, COPY'],
  ['cors', 'origins', '*'],
  ['cors', 'headers', corser.simpleRequestHeaders.concat([
    'Authorization', 'Origin', 'Referer'
  ]).join(', ')],
].forEach(function (info) {
  config.registerDefault.apply(config, info);
  config.on(info[0] + '.' + info[1], corsChanged);
});
corsChanged();

app.use(function (req, res, next) {
  if (!corsMiddleware) {
    return next();
  }
  return corsMiddleware(req, res, next);
});

// determine PouchDB instance

function updatePouchDB() {
  var opts = {};

  var dir = config.get('couchdb', 'database_dir') || args.dir;
  opts.prefix = path.resolve(dir) + path.sep;
  mkdirp.sync(opts.prefix);

  if (args.levelPrefix) {
    opts.prefix = args.levelPrefix;
  }
  if (args.inMemory) {
    opts.db = require('memdown');
  } else if (args.levelBackend) {
    opts.db = require(args.levelBackend);
  }

  var PouchDB;
  if (args.proxy) {
    PouchDB = require('http-pouchdb')(require('pouchdb'), args.proxy);
  } else {
    PouchDB = require('pouchdb').defaults(opts);
  }
  pouchDBApp.setPouchDB(PouchDB);
}
config.registerDefault('couchdb', 'database_dir', './');
config.on('couchdb.database_dir', updatePouchDB);
updatePouchDB();

app.use(pouchDBApp);

// handle listening

var server;

function listen() {
  loggingReady.then(listenImpl);
}

function listenImpl() {
  var host = args.host || config.get('httpd', 'bind_address');
  var port = args.port || config.get('httpd', 'port');

  server = app.listen(port, host, function () {
    var address = 'http://' + host + ':' + port + '/';
    logger.info('pouchdb-server has started on ' + address);
    if (args.inMemory) {
      logger.info('database is in-memory; no changes will be saved.');
    } else if (args.dir) {
      logger.info('database files will be saved to ' + args.dir);
    }
    if (args.levelBackend) {
      logger.info('using alternative backend: ' + args.levelBackend);
    }
    if (args.levelPrefix) {
      var prefix = args.levelPrefix;
      logger.info('all databases will be created with prefix: ' + prefix);
    }
    var fauxtonUrl = address + '_utils';
    logger.info('navigate to ' + fauxtonUrl + ' for the Fauxton UI.');
  });
  killable(server);

  server.on('error', function (e) {
    stopTailingLog();
    if (e.code === 'EADDRINUSE') {
      console.error('Error: Port ' + port + ' is already in use.');
      console.error('Try another one, e.g. pouchdb-server -p ' +
        (parseInt(port) + 1));
    } else {
      console.error('Uncaught error: ' + e);
      console.error(e.stack);
    }
  });
}

function rebind() {
  server.kill(listen);
}

config.registerDefault('httpd', 'port', 5984);
config.registerDefault('httpd', 'bind_address', '127.0.0.1');
config.on('httpd.port', rebind);
config.on('httpd.bind_address', rebind);
listen();

// handle exit

process.on('SIGINT', function () {
  process.exit(0);
});
